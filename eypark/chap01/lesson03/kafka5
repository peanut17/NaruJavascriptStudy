Spring Boot와 Kafka를 사용하여 메시지를 프로듀스할 때, 특정 키를 사용하여 메시지를 전송하는 방법을 알려드리겠습니다. Kafka의 키는 메시지의 파티셔닝 및 순서 유지에 중요한 역할을 합니다.

아래는 Spring Boot와 Spring Kafka를 사용하여 Kafka 토픽에 키가 포함된 메시지를 전송하는 예제입니다.

### 1. Spring Boot 프로젝트 설정
#### 의존성 추가
먼저 `build.gradle` 또는 `pom.xml`에 Spring Kafka 관련 의존성을 추가해야 합니다.

**Gradle (`build.gradle`)**:
```groovy
dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.kafka:spring-kafka'
}
```

**Maven (`pom.xml`)**:
```xml
<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
        <groupId>org.springframework.kafka</groupId>
        <artifactId>spring-kafka</artifactId>
    </dependency>
</dependencies>
```

### 2. Kafka 설정
`application.yml` 또는 `application.properties` 파일에 Kafka 설정을 추가합니다.

**`application.yml`**:
```yaml
spring:
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
```

**`application.properties`**:
```properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
```

### 3. Kafka Producer 작성
Kafka로 메시지를 보내기 위한 프로듀서를 작성합니다.

**KafkaProducerConfig.java**:
```java
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.annotation.EnableKafka;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;

import java.util.HashMap;
import java.util.Map;

@Configuration
@EnableKafka
public class KafkaProducerConfig {

    @Bean
    public ProducerFactory<String, String> producerFactory() {
        Map<String, Object> configProps = new HashMap<>();
        configProps.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        configProps.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        configProps.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        return new DefaultKafkaProducerFactory<>(configProps);
    }

    @Bean
    public KafkaTemplate<String, String> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory());
    }
}
```

**KafkaProducerService.java**:
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

@Service
public class KafkaProducerService {

    @Autowired
    private KafkaTemplate<String, String> kafkaTemplate;

    private static final String TOPIC = "your_topic_name";

    public void sendMessage(String key, String message) {
        kafkaTemplate.send(TOPIC, key, message);
    }
}
```

### 4. 사용 예제
이제 키를 사용하여 메시지를 Kafka 토픽에 전송하는 예제를 작성합니다.

**KafkaController.java**:
```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class KafkaController {

    @Autowired
    private KafkaProducerService producerService;

    @GetMapping("/send")
    public String sendMessage(@RequestParam("key") String key, @RequestParam("message") String message) {
        producerService.sendMessage(key, message);
        return "Message sent successfully";
    }
}
```

### 테스트 방법
Spring Boot 애플리케이션을 실행한 후, 브라우저 또는 Postman과 같은 도구를 사용하여 다음 URL로 요청을 보냅니다.

```
http://localhost:8080/send?key=myKey&message=myMessage
```

이렇게 하면 `myKey`라는 키와 함께 `myMessage`라는 메시지가 Kafka 토픽으로 전송됩니다.

이 예제를 통해 Spring Boot와 Kafka를 사용하여 키를 포함한 메시지를 프로듀스하는 방법을 이해할 수 있습니다. 추가적인 설정이나 요구 사항에 따라 코드를 확장할 수 있습니다.
