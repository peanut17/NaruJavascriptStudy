Impala에서 MyBatis를 통해 데이터를 SELECT하고, 이 데이터를 Apache Ignite에 적재하는 방법은 다음과 같습니다. 여기서는 Spring Boot 환경에서 MyBatis를 사용하여 Impala에서 데이터를 조회하고, 이를 Ignite로 저장하는 과정을 설명합니다.


---

1. 환경 설정

Maven/Gradle 의존성 추가

build.gradle:

dependencies {
    // MyBatis 의존성
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.1'

    // Apache Ignite 의존성
    implementation 'org.apache.ignite:ignite-core:2.15.0'
    implementation 'org.apache.ignite:ignite-spring:2.15.0'

    // Spring Boot 기본 의존성
    implementation 'org.springframework.boot:spring-boot-starter'
}

pom.xml:

<dependencies>
    <!-- MyBatis -->
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.3.1</version>
    </dependency>

    <!-- Apache Ignite -->
    <dependency>
        <groupId>org.apache.ignite</groupId>
        <artifactId>ignite-core</artifactId>
        <version>2.15.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.ignite</groupId>
        <artifactId>ignite-spring</artifactId>
        <version>2.15.0</version>
    </dependency>

    <!-- Spring Boot -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
</dependencies>


---

2. Impala 데이터 조회

MyBatis Mapper 구성

MyBatis를 사용하여 Impala에서 데이터를 조회하는 Mapper를 설정합니다.

Mapper 인터페이스 정의

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;
import java.util.List;

@Mapper
public interface ImpalaMapper {
    @Select("SELECT id, name, value FROM your_table_name")
    List<MyData> selectData();
}

데이터 모델 정의

import java.io.Serializable;

public class MyData implements Serializable {
    private Long id;
    private String name;
    private Double value;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Double getValue() {
        return value;
    }

    public void setValue(Double value) {
        this.value = value;
    }
}


---

3. Ignite 설정

Ignite 클러스터를 설정하고 데이터를 저장할 캐시를 정의합니다.

import org.apache.ignite.Ignite;
import org.apache.ignite.IgniteCache;
import org.apache.ignite.Ignition;
import org.apache.ignite.configuration.CacheConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class IgniteConfig {

    @Bean
    public Ignite ignite() {
        return Ignition.start("examples/config/example-ignite.xml");
    }

    @Bean
    public IgniteCache<Long, MyData> igniteCache(Ignite ignite) {
        CacheConfiguration<Long, MyData> cacheConfig = new CacheConfiguration<>();
        cacheConfig.setName("ImpalaToIgniteCache");
        cacheConfig.setIndexedTypes(Long.class, MyData.class);
        return ignite.getOrCreateCache(cacheConfig);
    }
}


---

4. Impala 데이터 적재 로직

Impala에서 데이터를 가져와 Ignite에 저장하는 서비스를 작성합니다.

import org.apache.ignite.IgniteCache;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DataLoaderService {

    @Autowired
    private ImpalaMapper impalaMapper;

    @Autowired
    private IgniteCache<Long, MyData> igniteCache;

    public void loadDataFromImpalaToIgnite() {
        // Impala에서 데이터 조회
        List<MyData> dataList = impalaMapper.selectData();

        // Ignite에 데이터 저장
        for (MyData data : dataList) {
            igniteCache.put(data.getId(), data);
        }

        System.out.println("Data successfully loaded into Ignite.");
    }
}


---

5. 애플리케이션 실행

Spring Boot 애플리케이션에서 데이터를 적재하는 로직을 실행합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ImpalaToIgniteApplication implements CommandLineRunner {

    @Autowired
    private DataLoaderService dataLoaderService;

    public static void main(String[] args) {
        SpringApplication.run(ImpalaToIgniteApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        dataLoaderService.loadDataFromImpalaToIgnite();
    }
}


---

6. 테스트 및 최적화

1. 데이터 적재 확인: Ignite의 관리 콘솔에서 데이터를 확인하거나 igniteCache.get(key)를 사용해 데이터를 확인합니다.


2. 성능 최적화: Impala 쿼리 성능 및 Ignite 캐시 설정을 점검합니다.


3. 오류 처리: 데이터 조회 실패 또는 Ignite 적재 중 발생할 수 있는 예외에 대한 처리를 추가합니다.




---

이 구조를 기반으로 적재 프로세스를 확장하거나, 스케줄링 등을 추가하여 자동화된 데이터 적재 시스템을 구현할 수 있습니다.

