Apache Ignite에서 데이터를 저장할 때 테이블 개념이 아니라 캐시(Cache) 개념을 사용합니다. 즉, Ignite는 기본적으로 RDBMS와 달리 테이블 대신 캐시 이름을 사용하며, 데이터를 적재할 캐시를 생성한 후 해당 캐시에 데이터를 삽입하는 구조입니다.

하지만, Ignite를 SQL 방식으로 사용할 경우, 캐시를 테이블처럼 정의할 수 있습니다. 아래에 캐시를 테이블처럼 사용하는 방법과 테이블 이름을 명시하는 방법을 포함해 설명하겠습니다.


---

1. Ignite 캐시를 테이블처럼 사용

Apache Ignite에서 캐시를 테이블처럼 정의하려면 SQL 스키마와 캐시 설정을 추가해야 합니다.

캐시 및 테이블 정의

캐시를 SQL 테이블로 사용할 수 있도록 CacheConfiguration에서 SQL 관련 설정을 추가합니다.

import org.apache.ignite.configuration.CacheConfiguration;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class IgniteConfig {

    @Bean
    public Ignite ignite() {
        return Ignition.start("examples/config/example-ignite.xml");
    }

    @Bean
    public CacheConfiguration<Long, MyData> igniteTableConfig() {
        CacheConfiguration<Long, MyData> cacheConfig = new CacheConfiguration<>();
        cacheConfig.setName("MyDataTable"); // 테이블명
        cacheConfig.setSqlSchema("PUBLIC"); // SQL 스키마 이름
        cacheConfig.setIndexedTypes(Long.class, MyData.class); // SQL 인덱스 설정

        return cacheConfig;
    }

    @Bean
    public IgniteCache<Long, MyData> igniteCache(Ignite ignite, CacheConfiguration<Long, MyData> igniteTableConfig) {
        return ignite.getOrCreateCache(igniteTableConfig);
    }
}

setName("MyDataTable"): Ignite의 테이블 이름(캐시 이름)을 지정합니다.

setSqlSchema("PUBLIC"): SQL 스키마를 설정하여 테이블처럼 사용할 수 있습니다.

setIndexedTypes(Long.class, MyData.class): SQL에서 사용할 데이터 타입과 인덱스를 설정합니다.



---

2. 데이터 적재 시 테이블 이름 사용

데이터를 적재할 때 igniteCache.put()을 사용하지만, Ignite의 SQL 인터페이스를 통해 데이터 적재도 가능합니다.

MyBatis 데이터를 Ignite에 SQL로 삽입하기

Ignite에서 SQL을 사용하려면 **ignite.sqlFieldsQuery()**를 사용할 수 있습니다.

import org.apache.ignite.Ignite;
import org.apache.ignite.cache.query.SqlFieldsQuery;
import org.apache.ignite.IgniteCache;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class DataLoaderService {

    @Autowired
    private ImpalaMapper impalaMapper;

    @Autowired
    private Ignite ignite;

    public void loadDataFromImpalaToIgnite() {
        // Impala에서 데이터 조회
        List<MyData> dataList = impalaMapper.selectData();

        // Ignite SQL을 사용하여 데이터 삽입
        IgniteCache<Long, MyData> cache = ignite.cache("MyDataTable");
        for (MyData data : dataList) {
            String sql = "INSERT INTO MyDataTable (id, name, value) VALUES (?, ?, ?)";
            cache.query(new SqlFieldsQuery(sql)
                .setArgs(data.getId(), data.getName(), data.getValue()));
        }

        System.out.println("Data successfully loaded into Ignite table.");
    }
}


---

3. 테이블 생성 및 데이터 확인

Ignite SQL Console 또는 JDBC를 통해 데이터를 확인할 수 있습니다.

Ignite SQL Console에서 테이블 확인

Ignite가 실행 중일 때, SQL을 통해 테이블과 데이터를 확인할 수 있습니다.

SELECT * FROM MyDataTable;

Ignite에서 테이블 생성 자동화

위 코드는 데이터 삽입 시 Ignite가 테이블을 자동으로 생성하도록 구성되었습니다. 만약 테이블 구조를 명시적으로 정의하려면 SQL을 사용해 테이블을 생성할 수 있습니다.

CREATE TABLE MyDataTable (
    id LONG PRIMARY KEY,
    name VARCHAR,
    value DOUBLE
) WITH "template=partitioned";


---

4. 정리

Ignite는 기본적으로 캐시 이름을 사용하여 데이터를 저장합니다.

SQL 테이블처럼 사용하려면 CacheConfiguration에서 SQL 스키마를 설정하거나 직접 테이블을 생성합니다.

데이터를 삽입할 때는 igniteCache.put() 또는 SQL 방식(INSERT INTO)을 사용할 수 있습니다.


이제 명시적으로 Ignite에서 테이블 이름(MyDataTable)을 사용하여 데이터를 적재하고 관리할 수 있습니다.

