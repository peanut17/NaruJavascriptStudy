Apache Ignite를 SQL 형식으로 사용하면서, Impala 쿼리로 SELECT한 데이터를 Ignite에 동일한 테이블 구조로 저장하려면 아래 단계를 따르면 됩니다. 여기에서는 Spring Boot와 MyBatis를 기반으로 설명합니다.


---

1. Ignite 테이블 생성 준비

Apache Ignite는 기본적으로 SQL 테이블을 캐시로 관리합니다. 따라서 SQL 테이블을 정의하고 데이터를 저장할 수 있습니다.

Ignite JDBC 연결 설정

Ignite를 SQL 형식으로 사용하려면 JDBC 드라이버를 설정합니다. 이를 통해 SQL 쿼리로 테이블을 생성하고 데이터를 삽입할 수 있습니다.

Gradle/Maven 의존성 추가

build.gradle:

dependencies {
    // Ignite JDBC 드라이버
    implementation 'org.apache.ignite:ignite-spring:2.15.0'
    implementation 'org.apache.ignite:ignite-core:2.15.0'
    implementation 'org.apache.ignite:ignite-indexing:2.15.0'

    // MyBatis
    implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:2.3.1'

    // Spring Boot 기본 의존성
    implementation 'org.springframework.boot:spring-boot-starter'
}

pom.xml:

<dependencies>
    <!-- Apache Ignite JDBC Driver -->
    <dependency>
        <groupId>org.apache.ignite</groupId>
        <artifactId>ignite-spring</artifactId>
        <version>2.15.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.ignite</groupId>
        <artifactId>ignite-core</artifactId>
        <version>2.15.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.ignite</groupId>
        <artifactId>ignite-indexing</artifactId>
        <version>2.15.0</version>
    </dependency>

    <!-- MyBatis -->
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.3.1</version>
    </dependency>

    <!-- Spring Boot -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
</dependencies>


---

2. Ignite SQL 테이블 생성

Ignite 테이블은 SQL 방식으로 생성합니다.

Ignite를 실행한 후, SQL을 통해 테이블을 생성합니다.

CREATE TABLE IF NOT EXISTS your_table_name (
    id LONG PRIMARY KEY,
    name VARCHAR,
    value DOUBLE
) WITH "template=partitioned";

id LONG PRIMARY KEY: 기본 키를 설정합니다.

WITH "template=partitioned": Ignite 캐시의 분산 유형을 지정합니다.



---

3. Impala 데이터 SELECT

Impala에서 데이터를 가져오기 위해 MyBatis를 사용합니다.

MyBatis Mapper 인터페이스

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Select;
import java.util.List;

@Mapper
public interface ImpalaMapper {

    @Select("SELECT id, name, value FROM your_impala_table")
    List<MyData> selectImpalaData();
}

데이터 모델 정의

Ignite와 Impala 모두에서 사용할 데이터 모델을 정의합니다.

import java.io.Serializable;

public class MyData implements Serializable {
    private Long id;
    private String name;
    private Double value;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Double getValue() {
        return value;
    }

    public void setValue(Double value) {
        this.value = value;
    }
}


---

4. Ignite 데이터 삽입 서비스

Spring Boot 서비스 클래스를 작성하여 Impala에서 데이터를 SELECT하고 Ignite에 INSERT합니다.

Ignite JDBC를 통한 데이터 삽입

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.List;

@Service
public class DataLoaderService {

    @Autowired
    private ImpalaMapper impalaMapper;

    @Autowired
    private DataSource igniteDataSource;

    public void loadDataFromImpalaToIgnite() {
        // Impala에서 데이터 조회
        List<MyData> impalaData = impalaMapper.selectImpalaData();

        // Ignite에 데이터 삽입
        try (Connection conn = igniteDataSource.getConnection()) {
            String sql = "INSERT INTO your_table_name (id, name, value) VALUES (?, ?, ?)";
            try (PreparedStatement pstmt = conn.prepareStatement(sql)) {
                for (MyData data : impalaData) {
                    pstmt.setLong(1, data.getId());
                    pstmt.setString(2, data.getName());
                    pstmt.setDouble(3, data.getValue());
                    pstmt.addBatch();
                }
                pstmt.executeBatch();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to insert data into Ignite.", e);
        }
    }
}

Ignite 데이터소스 설정

application.properties에서 Ignite JDBC 설정을 추가합니다.

spring.datasource.url=jdbc:ignite:thin://127.0.0.1/
spring.datasource.driver-class-name=org.apache.ignite.IgniteJdbcThinDriver
spring.datasource.username=
spring.datasource.password=


---

5. Spring Boot 애플리케이션 실행

Spring Boot 애플리케이션을 실행하여 Impala에서 데이터를 SELECT하고 Ignite에 저장합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ImpalaToIgniteApplication implements CommandLineRunner {

    @Autowired
    private DataLoaderService dataLoaderService;

    public static void main(String[] args) {
        SpringApplication.run(ImpalaToIgniteApplication.class, args);
    }

    @Override
    public void run(String... args) throws Exception {
        dataLoaderService.loadDataFromImpalaToIgnite();
    }
}


---

6. 테스트

1. Ignite SQL 콘솔 또는 JDBC 툴로 데이터를 확인합니다.



SELECT * FROM your_table_name;

2. MyBatis 쿼리 및 Ignite 테이블 구조가 일치하는지 확인합니다.


3. 오류 발생 시 데이터소스 설정, 테이블 이름, Ignite 노드 상태 등을 점검합니다.




---

이 방법을 통해 Impala의 데이터를 MyBatis로 조회하고, Ignite SQL 테이블에 동일하게 적재할 수 있습니다. 필요한 경우 스케줄링 기능을 추가하여 자동화도 가능합니다.

