Spring Boot로 Impala를 통해 Kudu 데이터를 조회한 후, Redis에 저장하고 이를 Redis에서 불러오는 방법은 다음과 같습니다:


---

1. 필요한 의존성 추가

build.gradle 또는 pom.xml에 필요한 의존성을 추가합니다.

Gradle:

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.apache.kudu:kudu-client:1.16.0'
    implementation 'org.apache.hive:hive-jdbc:2.3.9'
}

Maven:

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-redis</artifactId>
    </dependency>
    <dependency>
        <groupId>org.apache.kudu</groupId>
        <artifactId>kudu-client</artifactId>
        <version>1.16.0</version>
    </dependency>
    <dependency>
        <groupId>org.apache.hive</groupId>
        <artifactId>hive-jdbc</artifactId>
        <version>2.3.9</version>
    </dependency>
</dependencies>


---

2. Redis 설정

application.yml 또는 application.properties 파일에 Redis 설정을 추가합니다.

spring:
  redis:
    host: localhost
    port: 6379


---

3. Impala로 데이터 조회

Impala JDBC를 이용하여 데이터를 조회합니다.

import org.springframework.stereotype.Service;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

@Service
public class ImpalaService {
    private static final String IMPALA_JDBC_URL = "jdbc:impala://<IMPALA_HOST>:<IMPALA_PORT>/<DATABASE_NAME>";

    public List<MyDto> fetchDataFromImpala() {
        List<MyDto> dataList = new ArrayList<>();

        try (Connection connection = DriverManager.getConnection(IMPALA_JDBC_URL);
             Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery("SELECT * FROM kudu_table")) {

            while (resultSet.next()) {
                MyDto dto = new MyDto();
                dto.setId(resultSet.getInt("id"));
                dto.setName(resultSet.getString("name"));
                dto.setValue(resultSet.getDouble("value"));
                dataList.add(dto);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return dataList;
    }
}


---

4. Redis에 데이터 저장

Spring Data Redis를 이용하여 데이터를 Redis에 저장합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RedisService {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    public void saveDataToRedis(String key, List<MyDto> data) {
        redisTemplate.opsForValue().set(key, data);
    }

    @SuppressWarnings("unchecked")
    public List<MyDto> getDataFromRedis(String key) {
        return (List<MyDto>) redisTemplate.opsForValue().get(key);
    }
}


---

5. Controller에서 데이터 연동

Impala에서 데이터를 가져와 Redis에 저장하고 불러오는 로직을 구현합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class DataController {

    @Autowired
    private ImpalaService impalaService;

    @Autowired
    private RedisService redisService;

    @GetMapping("/load-data")
    public String loadData() {
        // Impala에서 데이터 가져오기
        List<MyDto> data = impalaService.fetchDataFromImpala();

        // Redis에 데이터 저장
        redisService.saveDataToRedis("myData", data);

        return "Data loaded into Redis!";
    }

    @GetMapping("/get-data")
    public List<MyDto> getData() {
        // Redis에서 데이터 가져오기
        return redisService.getDataFromRedis("myData");
    }
}


---

6. DTO 클래스

데이터를 담을 DTO 클래스 정의:

import java.io.Serializable;

public class MyDto implements Serializable {
    private int id;
    private String name;
    private double value;

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getValue() {
        return value;
    }

    public void setValue(double value) {
        this.value = value;
    }
}


---

7. RedisTemplate Bean 설정

RedisTemplate이 기본적으로 Serializable을 사용하도록 설정합니다.

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;

@Configuration
public class RedisConfig {

    @Bean
    public RedisTemplate<String, Object> redisTemplate(LettuceConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        return template;
    }
}


---

8. 실행

1. Impala에서 데이터를 조회하려면 /load-data API를 호출합니다.


2. Redis에서 데이터를 가져오려면 /get-data API를 호출합니다.



이렇게 하면 Impala → Redis → Spring Boot로 데이터가 연동됩니다.






List<DTO> 데이터를 Redis에 저장하고 키(key)를 통해 불러오는 방법을 Spring Boot와 Spring Data Redis를 이용해 구현하는 방법을 단계별로 설명드리겠습니다.


---

1. RedisTemplate Bean 설정

Redis에 데이터를 저장하고 조회하려면 RedisTemplate을 설정해야 합니다.

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

@Configuration
public class RedisConfig {

    @Bean
    public RedisTemplate<String, Object> redisTemplate(LettuceConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        // 키를 문자열로 저장
        template.setKeySerializer(new StringRedisSerializer());
        // 값을 JSON 형태로 저장
        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());
        return template;
    }
}


---

2. DTO 클래스 정의

Redis에 저장할 데이터를 담을 DTO 클래스를 작성합니다. Serializable을 구현해야 합니다.

import java.io.Serializable;

public class MyDto implements Serializable {
    private int id;
    private String name;
    private double value;

    // Getters and Setters
    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public double getValue() {
        return value;
    }

    public void setValue(double value) {
        this.value = value;
    }

    @Override
    public String toString() {
        return "MyDto{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", value=" + value +
                '}';
    }
}


---

3. RedisService 구현

Redis에 데이터를 저장하고 키(key)를 통해 데이터를 조회하는 기능을 구현합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RedisService {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    // 데이터를 Redis에 저장
    public void saveData(String key, List<MyDto> data) {
        redisTemplate.opsForValue().set(key, data);
    }

    // Redis에서 데이터를 조회
    @SuppressWarnings("unchecked")
    public List<MyDto> getData(String key) {
        return (List<MyDto>) redisTemplate.opsForValue().get(key);
    }
}


---

4. Controller 구현

API를 통해 데이터를 Redis에 저장하거나 Redis에서 데이터를 가져오는 기능을 구현합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController
@RequestMapping("/api/redis")
public class RedisController {

    @Autowired
    private RedisService redisService;

    // Redis에 데이터 저장
    @PostMapping("/save")
    public String saveData() {
        // 샘플 데이터를 생성
        List<MyDto> dataList = new ArrayList<>();
        dataList.add(new MyDto(1, "Item1", 100.0));
        dataList.add(new MyDto(2, "Item2", 200.0));

        // Redis에 저장
        redisService.saveData("myDataKey", dataList);

        return "Data saved to Redis!";
    }

    // Redis에서 데이터 조회
    @GetMapping("/get")
    public List<MyDto> getData() {
        // Redis에서 키를 통해 데이터 가져오기
        return redisService.getData("myDataKey");
    }
}


---

5. Redis에 데이터 저장 및 조회 흐름

1. /api/redis/save 엔드포인트를 호출하면 List<MyDto>가 Redis에 저장됩니다.

저장된 데이터는 Redis에 myDataKey라는 키로 저장됩니다.



2. /api/redis/get 엔드포인트를 호출하면 Redis에서 myDataKey로 저장된 List<MyDto> 데이터를 조회할 수 있습니다.




---

6. Redis CLI로 데이터 확인

Redis CLI를 사용해 데이터를 확인할 수 있습니다.

# Redis CLI 실행
$ redis-cli

# 저장된 키 확인
> keys *

# 특정 키의 값 조회 (JSON 형태로 저장됨)
> get myDataKey


---

7. 데이터 직렬화와 역직렬화

GenericJackson2JsonRedisSerializer를 사용하면 데이터가 JSON 형식으로 저장되므로, 데이터 직렬화 및 역직렬화가 자동으로 처리됩니다. 이를 통해 데이터를 List<DTO> 형태로 저장하고 가져올 수 있습니다.


---

8. Redis 데이터 TTL 설정 (선택)

Redis에 저장된 데이터를 일정 시간 후 만료시키려면 TTL(Time-To-Live)을 설정할 수 있습니다.

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import java.util.concurrent.TimeUnit;

@Service
public class RedisService {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    // 데이터를 Redis에 저장하며 TTL 설정
    public void saveDataWithTTL(String key, List<MyDto> data, long ttl) {
        redisTemplate.opsForValue().set(key, data, ttl, TimeUnit.SECONDS);
    }
}

saveDataWithTTL 메소드를 호출하여 데이터를 저장하고, TTL 값을 설정하면 설정된 시간이 지나면 Redis에서 데이터가 자동으로 삭제됩니다.


---

요약

RedisTemplate을 설정하여 데이터를 JSON 형식으로 저장.

데이터를 저장할 때 키(key)를 지정해 관리.

API를 통해 데이터를 저장하고 조회하며 TTL 설정으로 만료 시간 관리 가능.


이 방법을 통해 효율적으로 List<DTO> 데이터를 Redis에 저장하고, 키를 통해 조회할 수 있습니다.

