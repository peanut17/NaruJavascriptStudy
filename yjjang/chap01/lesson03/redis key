Redis에서 키 존재 여부를 확인한 후, 키가 있으면 데이터를 조회하고, 없으면 데이터를 Redis에 적재하는 코드는 다음과 같이 구현할 수 있습니다.


---

1. RedisService 구현

Redis의 키 존재 여부를 확인하고, 데이터를 조건에 따라 저장하거나 조회하는 기능을 추가합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class RedisService {

    @Autowired
    private RedisTemplate<String, Object> redisTemplate;

    // Redis에 특정 키가 존재하는지 확인
    public boolean hasKey(String key) {
        Boolean exists = redisTemplate.hasKey(key);
        return exists != null && exists;
    }

    // Redis에서 데이터 조회
    @SuppressWarnings("unchecked")
    public List<MyDto> getData(String key) {
        return (List<MyDto>) redisTemplate.opsForValue().get(key);
    }

    // Redis에 데이터 저장
    public void saveData(String key, List<MyDto> data) {
        redisTemplate.opsForValue().set(key, data);
    }

    // Redis에서 키를 확인하고 데이터를 조건에 따라 처리
    public List<MyDto> getOrSaveData(String key, List<MyDto> dataToSaveIfNotExists) {
        if (hasKey(key)) {
            // 키가 존재하면 Redis에서 데이터 조회
            return getData(key);
        } else {
            // 키가 없으면 Redis에 데이터 저장
            saveData(key, dataToSaveIfNotExists);
            return dataToSaveIfNotExists;
        }
    }
}


---

2. Controller 구현

API를 통해 Redis 키를 확인하고 조건에 따라 데이터를 저장하거나 조회하도록 설정합니다.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.List;

@RestController
public class RedisController {

    @Autowired
    private RedisService redisService;

    // Redis에서 키를 확인하고 데이터를 조회 또는 저장
    @GetMapping("/api/redis/get-or-save")
    public List<MyDto> getOrSaveData(@RequestParam String key) {
        // 만약 키가 없을 경우 저장할 샘플 데이터 생성
        List<MyDto> sampleData = new ArrayList<>();
        sampleData.add(new MyDto(1, "Sample1", 100.0));
        sampleData.add(new MyDto(2, "Sample2", 200.0));

        // Redis에서 키 확인 후 데이터 조회 또는 저장
        return redisService.getOrSaveData(key, sampleData);
    }
}


---

3. 전체 흐름

1. 클라이언트에서 /api/redis/get-or-save?key=myDataKey API를 호출합니다.


2. RedisService에서:

hasKey(key)로 Redis에 키가 있는지 확인합니다.

키가 있으면 Redis에서 데이터를 조회합니다.

키가 없으면 지정된 데이터를 Redis에 저장하고 저장된 데이터를 반환합니다.



3. 클라이언트는 저장된 데이터를 확인할 수 있습니다.




---

4. 예시 실행 결과

1. 키가 없는 경우:

1. API 호출: GET /api/redis/get-or-save?key=myDataKey


2. Redis에서 myDataKey를 찾을 수 없음 → sampleData를 Redis에 저장.


3. 응답:

[
    {"id": 1, "name": "Sample1", "value": 100.0},
    {"id": 2, "name": "Sample2", "value": 200.0}
]



2. 키가 있는 경우:

1. API 호출: GET /api/redis/get-or-save?key=myDataKey


2. Redis에서 myDataKey를 찾음 → 저장된 데이터를 반환.


3. 응답 (Redis에 저장된 데이터):

[
    {"id": 1, "name": "Sample1", "value": 100.0},
    {"id": 2, "name": "Sample2", "value": 200.0}
]




---

5. Redis 데이터 TTL 설정 (선택)

Redis에 데이터를 저장할 때 TTL(Time-To-Live)을 설정하여 자동 만료를 추가할 수 있습니다.

import java.util.concurrent.TimeUnit;

public void saveDataWithTTL(String key, List<MyDto> data, long ttl) {
    redisTemplate.opsForValue().set(key, data, ttl, TimeUnit.SECONDS);
}

TTL 설정 시 데이터를 특정 시간 이후 자동으로 만료시킬 수 있습니다.


---

이 구현을 통해 Redis에 데이터를 조건부로 저장하거나 조회할 수 있습니다. 이를 통해 효율적인 캐싱과 데이터 처리가 가능합니다.

