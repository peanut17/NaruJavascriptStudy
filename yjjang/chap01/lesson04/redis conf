Spring Boot에서 Redis에 대한 여러 옵션을 설정하려면 application.properties 또는 application.yml 파일을 사용하거나 Java Config를 활용할 수 있습니다. 여기에는 Redis 서버 연결 정보, 커넥션 풀 설정, 직렬화 방식 등을 포함합니다. 아래에 주요 설정 방법을 단계별로 정리했습니다.

1. 기본 Redis 설정 

application.properties 또는 application.yml에서 Redis 서버의 호스트와 포트 등을 설정할 수 있습니다.

application.properties spring.redis.host=localhost spring.redis.port=6379 spring.redis.password=yourpassword spring.redis.database=0 application.yml spring: redis: host: localhost port: 6379 password: yourpassword database: 0 2. Redis 커넥션 풀 설정 

Jedis 또는 Lettuce 클라이언트를 사용하는 경우, 커넥션 풀 설정을 추가로 구성할 수 있습니다.

Jedis 커넥션 풀 설정 spring.redis.jedis.pool.max-active=8 spring.redis.jedis.pool.max-idle=8 spring.redis.jedis.pool.min-idle=0 spring.redis.jedis.pool.max-wait=1000ms Lettuce 커넥션 풀 설정 spring.redis.lettuce.pool.max-active=8 spring.redis.lettuce.pool.max-idle=8 spring.redis.lettuce.pool.min-idle=0 spring.redis.lettuce.pool.max-wait=1000ms 3. Redis 키/값 직렬화 설정 

Redis에 저장되는 데이터의 직렬화 방식을 설정하려면 Java Config를 사용합니다. 기본적으로 Spring Boot는 StringRedisSerializer를 사용합니다.

Config 클래스 import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.data.redis.serializer.StringRedisSerializer; @Configuration public class RedisConfig { @Bean public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) { RedisTemplate<String, Object> template = new RedisTemplate<>(); template.setConnectionFactory(connectionFactory); // 키 직렬화 설정 template.setKeySerializer(new StringRedisSerializer()); // 값 직렬화 설정 template.setValueSerializer(new StringRedisSerializer()); return template; } } 4. Redis 세션 및 캐시 설정 

Redis를 캐시 또는 세션 저장소로 사용할 때 필요한 설정입니다.

캐시 설정 (Spring Cache 사용) 

application.properties:

spring.cache.type=redis spring.cache.redis.time-to-live=600000 # 캐시 TTL 설정 (밀리초) spring.cache.redis.key-prefix=myapp:cache: spring.cache.redis.use-key-prefix=true 세션 저장소로 Redis 사용 

application.properties:

spring.session.store-type=redis spring.session.redis.flush-mode=on-save spring.session.redis.namespace=spring:session 5. Redis Cluster 또는 Sentinel 설정 

Redis 클러스터와 Sentinel 환경도 지원합니다.

클러스터 설정 spring: redis: cluster: nodes: - 127.0.0.1:7000 - 127.0.0.1:7001 - 127.0.0.1:7002 max-redirects: 3 Sentinel 설정 spring: redis: sentinel: master: mymaster nodes: - 127.0.0.1:26379 - 127.0.0.1:26380 password: yourpassword 6. Redis Pub/Sub 설정 

Redis Pub/Sub를 활용하려면 Listener와 MessagePublisher를 구성해야 합니다.

Config 클래스 import org.springframework.context.annotation.Bean; import org.springframework.context.annotation.Configuration; import org.springframework.data.redis.connection.MessageListenerAdapter; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.listener.PatternTopic; import org.springframework.data.redis.listener.RedisMessageListenerContainer; @Configuration public class PubSubConfig { @Bean RedisMessageListenerContainer container(RedisConnectionFactory connectionFactory, MessageListenerAdapter listenerAdapter) { RedisMessageListenerContainer container = new RedisMessageListenerContainer(); container.setConnectionFactory(connectionFactory); container.addMessageListener(listenerAdapter, new PatternTopic("myTopic")); return container; } @Bean MessageListenerAdapter listenerAdapter(MyMessageSubscriber subscriber) { return new MessageListenerAdapter(subscriber, "onMessage"); } } 7. Redis 명령어 실행 

Spring Data Redis의 RedisTemplate을 사용하여 Redis 명령어를 실행할 수 있습니다.

예: RedisTemplate 사용 import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.stereotype.Service; @Service public class RedisService { @Autowired private RedisTemplate<String, Object> redisTemplate; public void saveData(String key, Object value) { redisTemplate.opsForValue().set(key, value); } public Object getData(String key) { return redisTemplate.opsForValue().get(key); } } 

이렇게 다양한 방법으로 Redis 옵션을 설정할 수 있으며, 환경에 따라 적합한 설정을 선택하여 적용하면 됩니다.

