Spring Boot에서 Redis의 주기적인 데이터 갱신 및 메모리 제한 설정 방법은 다음과 같습니다. Redis 설정은 Spring Boot 애플리케이션에서 처리하거나 Redis 서버에서 직접 관리할 수 있습니다.

1. Redis 데이터 갱신 주기 설정 

Redis에 데이터를 저장하거나 주기적으로 갱신하려면 Spring Boot에서 다음 방법을 사용할 수 있습니다.

(1) Spring Scheduler 사용 

Spring의 @Scheduled을 사용하여 Redis 데이터를 주기적으로 갱신하는 방법:

예제 코드 import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.scheduling.annotation.Scheduled; import org.springframework.stereotype.Service; @Service public class RedisScheduler { @Autowired private RedisTemplate<String, Object> redisTemplate; @Scheduled(fixedRate = 60000) // 60초마다 실행 public void updateRedisData() { // 예: 특정 키의 값을 갱신 redisTemplate.opsForValue().set("exampleKey", "updatedValue"); System.out.println("Redis 데이터가 갱신되었습니다."); } } @Scheduled 속성 fixedRate: 고정된 주기로 실행 (밀리초 단위). fixedDelay: 이전 작업이 끝난 후 지정된 시간 이후에 실행. cron: CRON 표현식으로 스케줄링. 2. Redis 메모리 제한 설정 

Redis는 메모리 사용량을 제한하고 초과 시 처리 방식을 설정할 수 있습니다. 이를 Redis 설정 파일 또는 Spring Boot 설정에서 관리합니다.

(1) Redis 설정 파일에서 메모리 제한 

Redis 서버 설정 파일(/etc/redis/redis.conf)에서 다음 설정을 수정합니다.

주요 설정 # 최대 메모리 제한 (예: 256MB) maxmemory 256mb # 메모리가 초과되었을 때 제거 정책 maxmemory-policy allkeys-lru 메모리 제거 정책 (maxmemory-policy) volatile-lru: TTL이 설정된 키 중에서 LRU(Least Recently Used) 방식으로 제거. allkeys-lru: 모든 키 중에서 LRU 방식으로 제거. volatile-ttl: TTL이 설정된 키 중에서 만료 시간이 가까운 키 제거. noeviction: 메모리가 부족할 경우 새 데이터를 쓰지 않음. (2) Spring Boot에서 메모리 정책 설정 

Spring Boot에서 Redis 명령을 사용하여 동적으로 메모리 정책을 설정할 수 있습니다.

예제 코드 import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.connection.RedisConnectionFactory; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.stereotype.Service; import javax.annotation.PostConstruct; @Service public class RedisMemoryConfig { @Autowired private RedisConnectionFactory connectionFactory; @PostConstruct public void configureRedisMemory() { // Redis 명령 실행 var connection = connectionFactory.getConnection(); connection.setConfig("maxmemory", "256mb".getBytes()); connection.setConfig("maxmemory-policy", "allkeys-lru".getBytes()); System.out.println("Redis 메모리 설정이 완료되었습니다."); } } 3. TTL(만료 시간) 설정 

Redis 키별로 TTL(Time To Live)을 설정하여 메모리 관리를 더욱 효율적으로 할 수 있습니다.

(1) Spring Data Redis를 사용한 TTL 설정 

Spring의 RedisTemplate을 사용하여 TTL을 설정:

import org.springframework.beans.factory.annotation.Autowired; import org.springframework.data.redis.core.RedisTemplate; import org.springframework.stereotype.Service; import java.util.concurrent.TimeUnit; @Service public class RedisTTLService { @Autowired private RedisTemplate<String, Object> redisTemplate; public void saveDataWithTTL(String key, Object value, long ttlSeconds) { // 데이터 저장 및 TTL 설정 redisTemplate.opsForValue().set(key, value, ttlSeconds, TimeUnit.SECONDS); } } 사용 예: redisTTLService.saveDataWithTTL("temporaryKey", "temporaryValue", 60); // 60초 후 만료 (2) Redis CLI를 사용한 TTL 설정 

Redis CLI에서 특정 키의 TTL을 설정하려면 다음 명령을 사용:

SETEX mykey 60 "value" # 60초 후 만료 4. Redis 캐시 설정 

Spring Boot의 Redis 캐시를 사용하여 데이터 만료 시간을 설정할 수도 있습니다.

application.yml 예제 spring: cache: type: redis redis: time-to-live: 60000 # 캐시 TTL (밀리초) 5. Redis 모니터링 

Redis 서버의 메모리 상태와 키를 모니터링하려면 다음 명령을 사용할 수 있습니다.

(1) Redis CLI 메모리 사용량 확인: redis-cli INFO memory TTL 확인: redis-cli TTL <key> 모든 키 조회: redis-cli KEYS * (2) Spring Actuator 

Spring Boot에 Actuator를 추가하여 Redis 상태를 모니터링할 수 있습니다.

결론 주기적 데이터 갱신은 Spring Scheduler를 사용해 구현할 수 있습니다. Redis 메모리 제한은 maxmemory와 maxmemory-policy 설정으로 관리합니다. TTL을 통해 개별 데이터의 만료 시간을 설정하고 메모리 효율을 높일 수 있습니다. Redis 설정은 서버 설정 파일 또는 Spring Boot 설정 코드에서 모두 가능하니 필요에 따라 선택하여 적용하세요. 
