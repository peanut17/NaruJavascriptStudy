커넥션 풀(Connection Pool) 개념 

커넥션 풀(Connection Pool)은 데이터베이스, Redis 등과 같은 외부 리소스에 접근하기 위해 미리 일정 수의 커넥션(Connection)을 생성하고 이를 재사용하는 기술입니다.

작동 원리 애플리케이션이 시작될 때 미리 설정된 수의 커넥션을 생성하여 풀(Pool)에 저장. 클라이언트 요청이 들어오면 풀에서 사용 가능한 커넥션을 제공. 작업이 완료되면 커넥션을 닫지 않고 다시 풀에 반환하여 재사용 가능 상태로 만듦. 필요에 따라 동적으로 커넥션을 생성하거나 제거하여 최적의 성능을 유지. 커넥션 풀이 필요한 이유 

자원 절약:

새 커넥션을 생성할 때 드는 비용(네트워크 연결, 인증 등)이 크기 때문에, 커넥션을 재사용하면 성능을 크게 개선할 수 있음. 

속도 향상:

매번 커넥션을 생성하고 닫는 오버헤드를 줄여 애플리케이션 응답 시간을 단축. 

동시성 관리:

많은 클라이언트 요청을 처리할 때 제한된 커넥션 자원을 효율적으로 관리 가능. 

안정성:

일정 수의 커넥션만 사용하도록 제한하여 데이터베이스나 Redis 서버에 과부하를 방지. 커넥션 풀의 주요 구성 요소 

최대 커넥션 수 (Max Connections):

커넥션 풀에서 동시에 유지할 수 있는 최대 커넥션 수. 과도한 커넥션은 리소스 낭비를 초래하므로 적절히 설정해야 함. 

최소 커넥션 수 (Min Connections):

풀에서 항상 유지되는 최소 커넥션 수. 최소 커넥션을 설정하면 요청 발생 시 커넥션 생성 대기 시간을 줄일 수 있음. 

최대 대기 시간 (Max Wait Time):

모든 커넥션이 사용 중일 때 새로운 커넥션 요청이 대기할 수 있는 최대 시간. 대기 시간이 초과되면 요청은 실패 처리. 

커넥션 유휴 시간 (Idle Time):

사용되지 않는 커넥션을 풀에서 얼마나 오래 유지할지 설정. 유휴 시간이 지나면 커넥션을 제거하여 리소스를 절약. 

검증 및 복구:

커넥션의 유효성을 주기적으로 확인하여 문제가 있는 커넥션을 제거. 커넥션 풀 사용 사례 1. 데이터베이스 커넥션 풀 예: HikariCP, Apache DBCP, C3P0 등 JDBC 커넥션 풀로, 데이터베이스 연결을 효율적으로 관리. Spring Boot에서 HikariCP는 기본 데이터베이스 커넥션 풀로 사용됨. 

설정 예제 (application.properties):

spring.datasource.hikari.maximum-pool-size=10 spring.datasource.hikari.minimum-idle=5 spring.datasource.hikari.idle-timeout=30000 spring.datasource.hikari.max-lifetime=1800000 spring.datasource.hikari.connection-timeout=20000 2. Redis 커넥션 풀 Redis 클라이언트(Jedis, Lettuce 등)는 커넥션 풀을 기본으로 제공. Redis 서버와의 연결을 효율적으로 관리. 

Jedis 설정 예제:

spring.redis.jedis.pool.max-active=10 spring.redis.jedis.pool.max-idle=8 spring.redis.jedis.pool.min-idle=2 spring.redis.jedis.pool.max-wait=2000 3. HTTP 커넥션 풀 REST API 호출 시 HTTP 커넥션 풀을 사용해 성능을 최적화. Apache HttpClient, OkHttp 등이 HTTP 커넥션 풀을 지원. 커넥션 풀 튜닝 시 고려사항 

서버의 처리 용량

데이터베이스, Redis 등 서버가 처리할 수 있는 최대 동시 연결 수를 고려하여 설정. 

애플리케이션 동시성

애플리케이션에서 처리할 클라이언트 요청 수에 따라 적절한 최대/최소 커넥션 수 설정. 

부하 테스트

다양한 설정 값을 테스트하여 최적의 성능을 도출. 

유휴 시간 설정

너무 짧으면 빈번한 커넥션 생성/종료로 성능 저하. 너무 길면 불필요한 커넥션이 유지되어 리소스 낭비. 장점과 단점 장점 성능 향상: 커넥션 생성/종료 오버헤드 감소. 안정성: 동시성 제한으로 외부 리소스 보호. 효율성: 리소스를 재활용하여 최적의 자원 사용. 단점 초기 설정이 복잡할 수 있음. 잘못된 설정은 성능 저하를 초래. 너무 많은 커넥션 유지 시 메모리 및 리소스 낭비. 결론 

커넥션 풀은 리소스를 효율적으로 사용하고 성능을 최적화하는 데 필수적인 기술입니다. 애플리케이션의 특성과 외부 시스템의 용량을 고려하여 적절히 설정하면 안정성과 성능을 모두 향상시킬 수 있습니다.

