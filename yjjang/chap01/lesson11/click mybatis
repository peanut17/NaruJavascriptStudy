ClickHouse를 Spring Boot와 MyBatis로 연동하여 데이터를 출력하는 방법을 단계별로 자세히 설명드릴게요.

1. 프로젝트 설정

1.1. pom.xml에 의존성 추가

Spring Boot, MyBatis, ClickHouse JDBC 드라이버를 사용하려면 pom.xml에 아래와 같이 의존성을 추가해야 합니다.

<dependencies>
    <!-- Spring Boot 기본 스타터 -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <!-- MyBatis Spring Boot 스타터 -->
    <dependency>
        <groupId>org.mybatis.spring.boot</groupId>
        <artifactId>mybatis-spring-boot-starter</artifactId>
        <version>2.2.0</version> <!-- 최신 버전 확인 -->
    </dependency>

    <!-- ClickHouse JDBC 드라이버 -->
    <dependency>
        <groupId>ru.yandex.clickhouse</groupId>
        <artifactId>clickhouse-jdbc</artifactId>
        <version>0.3.2</version> <!-- 최신 버전 확인 -->
    </dependency>

    <!-- Spring Boot Data JDBC -->
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-data-jdbc</artifactId>
    </dependency>
</dependencies>

2. ClickHouse 데이터소스 설정

application.yml 또는 application.properties 파일에 ClickHouse 데이터베이스 연결 정보를 설정합니다. 예를 들어, application.yml에 아래와 같이 작성할 수 있습니다.

2.1. application.yml 설정

spring:
  datasource:
    url: jdbc:clickhouse://localhost:8123/default  # ClickHouse 서버 URL
    driver-class-name: ru.yandex.clickhouse.ClickHouseDriver
    username: default  # ClickHouse의 사용자 이름
    password: ""  # ClickHouse 비밀번호 (없으면 빈 문자열로 설정)
    hikari:
      maximum-pool-size: 10  # 커넥션 풀 크기 설정

3. MyBatis Mapper 생성

MyBatis에서 데이터를 조회할 Mapper를 생성해야 합니다. 예를 들어, UserMapper를 만든다고 가정하면 다음과 같습니다.

3.1. UserMapper.java 인터페이스

@Mapper
public interface UserMapper {

    // SQL 쿼리 작성 (MyBatis의 @Select 사용)
    @Select("SELECT * FROM users WHERE age > #{age}")
    List<User> getUsersByAge(int age);
}

여기서 @Select 애너테이션은 users 테이블에서 나이가 특정 값 이상인 사용자를 조회하는 SQL 쿼리를 정의합니다.

4. DTO 클래스 생성

MyBatis가 반환할 데이터를 매핑할 DTO 클래스를 생성합니다. 예를 들어, User 클래스를 생성합니다.

4.1. User.java 클래스

public class User {
    private int id;
    private String name;
    private int age;

    // 기본 생성자, getter, setter 추가
    public User(int id, String name, int age) {
        this.id = id;
        this.name = name;
        this.age = age;
    }

    // getter, setter 생략
}

5. 서비스 레이어 구현

서비스 클래스에서 Mapper를 호출하여 데이터를 처리하는 로직을 작성합니다. UserService 클래스는 UserMapper를 주입받아 데이터를 가져옵니다.

5.1. UserService.java

@Service
public class UserService {

    @Autowired
    private UserMapper userMapper;

    public List<User> getUsersByAge(int age) {
        return userMapper.getUsersByAge(age);
    }
}

6. 컨트롤러 구현

UserService에서 데이터를 가져와서 결과를 출력할 컨트롤러를 구현합니다.

6.1. UserController.java

@RestController
@RequestMapping("/users")
public class UserController {

    @Autowired
    private UserService userService;

    @GetMapping("/age/{age}")
    public List<User> getUsersByAge(@PathVariable int age) {
        return userService.getUsersByAge(age);  // 서비스에서 데이터 반환
    }
}

7. 프로그램 실행

이제 Spring Boot 애플리케이션을 실행하여 ClickHouse와 MyBatis를 통해 데이터를 조회할 수 있습니다. 예를 들어, /users/age/25로 GET 요청을 보내면, 나이가 25 이상인 사용자 데이터를 출력합니다.

8. ClickHouse 서버 설정

ClickHouse 서버가 로컬에서 실행되고 있다고 가정했습니다. 서버가 다르게 설정되어 있거나 원격지에 있을 경우, application.yml에서 해당 설정을 변경해야 합니다.

9. 디버깅 및 확인

Spring Boot 애플리케이션을 실행할 때, 데이터베이스 연결이 잘 되었는지 확인하려면 로그를 살펴보세요.

MyBatis 쿼리 실행 결과가 예상대로 나오지 않으면 쿼리나 DTO 매핑을 다시 확인해보세요.


이 단계들을 따라가면 Spring Boot와 MyBatis를 통해 ClickHouse 데이터베이스와 연동하여 데이터를 조회하고 출력할 수 있습니다. 추가로 도움이 필요하면 언제든지 질문해주세요!

