
🔥 A 서버(기존) + B 서버(추가) ClickHouse 클러스터 구성 방법

A 서버에 ClickHouse가 이미 설치되어 있고, B 서버를 추가하여 클러스터링하려면 다음 단계를 따르면 됩니다.


---

✅ 1. B 서버에 ClickHouse 설치

(1) B 서버에 ClickHouse 설치 (Ubuntu)

B 서버에서 아래 명령어 실행:

sudo apt-get update
sudo apt-get install -y clickhouse-server clickhouse-client

ClickHouse 서비스 시작


sudo systemctl start clickhouse-server
sudo systemctl enable clickhouse-server

설치 확인


clickhouse-client --version


---

✅ 2. 클러스터 설정 (A 서버 & B 서버)

A 서버와 B 서버에서 config.xml을 수정하여 클러스터를 설정해야 합니다.

(1) A 서버 (/etc/clickhouse-server/config.xml)

<yandex>
    <remote_servers>
        <cluster_2nodes>
            <shard>
                <replica>
                    <host>A_SERVER_IP</host>
                    <port>9000</port>
                </replica>
                <replica>
                    <host>B_SERVER_IP</host>
                    <port>9000</port>
                </replica>
            </shard>
        </cluster_2nodes>
    </remote_servers>
</yandex>

(2) B 서버 (/etc/clickhouse-server/config.xml)

<yandex>
    <remote_servers>
        <cluster_2nodes>
            <shard>
                <replica>
                    <host>A_SERVER_IP</host>
                    <port>9000</port>
                </replica>
                <replica>
                    <host>B_SERVER_IP</host>
                    <port>9000</port>
                </replica>
            </shard>
        </cluster_2nodes>
    </remote_servers>
</yandex>

📌 A_SERVER_IP / B_SERVER_IP에는 실제 서버 IP를 입력해야 합니다.

A 서버와 B 서버가 서로 접근 가능해야 하므로, 방화벽을 열어야 함.


sudo ufw allow 9000/tcp


---

✅ 3. A & B 서버에서 설정 적용 및 재시작

A 서버와 B 서버에서 아래 명령어를 실행하여 설정을 적용합니다.

sudo systemctl restart clickhouse-server


---

✅ 4. 클러스터 확인

A 또는 B 서버에서 ClickHouse 클라이언트 접속 후, 아래 명령 실행:

SELECT * FROM system.clusters WHERE cluster = 'cluster_2nodes';

A, B 두 개의 노드가 정상적으로 조회되면 설정 완료! 🎉



---

✅ 5. 클러스터 테이블 생성

A 서버와 B 서버에서 동일한 테이블을 생성한 후, Distributed 엔진을 사용하여 데이터 분산.

(1) A & B 서버에 local_table 생성

CREATE TABLE local_table
(
    id UInt64,
    name String,
    value Float32
) ENGINE = MergeTree()
ORDER BY id;

(2) A & B 서버에서 Distributed 테이블 생성

CREATE TABLE distributed_table
ENGINE = Distributed('cluster_2nodes', default, local_table, cityHash64(id));

cityHash64(id)를 사용하여 샤딩 키를 설정하여 데이터 분산.



---

✅ 6. 클러스터에서 쿼리 실행 테스트

SELECT count(*) FROM distributed_table;

이제 A와 B 서버에 자동으로 부하 분산되면서 성능이 향상됨! 🚀



---

✅ 📌 최적화 설정

1️⃣ 불필요한 샤드 스캔 방지

SET optimize_skip_unused_shards = 1;

필요한 샤드만 조회하여 쿼리 속도 향상


2️⃣ 쿼리 성능 최적화

SET max_threads = 8;  -- 병렬 처리 활성화
SET max_memory_usage = 10GB;  -- 메모리 설정 조정


---

🎯 최종 정리

1. B 서버에 ClickHouse 설치


2. A & B 서버에 클러스터 설정 (config.xml)


3. A & B 서버 재시작 후 클러스터 확인


4. Distributed 테이블 생성 및 샤딩 설정


5. 쿼리 실행 테스트 & 최적화 적용



이제 A+B 서버를 활용한 ClickHouse 클러스터에서 쿼리 속도가 더욱 빨라집니다! 🚀

