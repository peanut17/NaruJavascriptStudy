ClickHouse에서 대용량 데이터(여러 테이블 JOIN 포함) 쿼리를 빠르게 실행하는 방법을 정리해줄게! 🚀


---

🔹 1. ClickHouse에서 JOIN의 기본 개념

ClickHouse는 OLAP(Online Analytical Processing) DB이기 때문에, 일반적인 RDBMS(MySQL, PostgreSQL)와 JOIN 방식이 조금 달라.
기본적으로 ClickHouse에서는 JOIN을 최소화하고, 대용량 데이터를 처리할 때 JOIN을 최적화해야 함.

✅ ClickHouse의 JOIN 방식
JOIN 유형	설명	사용 사례
ANY INNER JOIN	가장 일반적인 INNER JOIN (첫 번째 일치 항목만 가져옴)	중복이 적은 경우
ALL INNER JOIN	일반적인 RDBMS의 INNER JOIN과 동일 (모든 일치 항목을 가져옴)	중복이 많을 때
LEFT JOIN	왼쪽 테이블의 모든 행을 유지하고 오른쪽 테이블과 매칭	보조 데이터가 있는 경우
RIGHT JOIN	오른쪽 테이블의 모든 행을 유지	특수한 경우
CROSS JOIN	모든 조합을 생성 (매우 위험, 피할 것!)	거의 사용 X
ASOF JOIN	시간 기반 근사 JOIN	타임스탬프 기반 데이터

👉 ClickHouse에서는 ANY INNER JOIN이 가장 빠름 (필요한 경우만 JOIN 수행)
👉 기본적으로 ALL INNER JOIN보다 ANY INNER JOIN을 추천


---

🔹 2. JOIN 최적화를 위한 설정

ClickHouse에서 JOIN을 최적화하려면, 두 가지 핵심 설정이 중요해.

✅ 1️⃣ join_use_nulls = 1 설정 (NULL 값 처리)

SET join_use_nulls = 1;

🔹 기본적으로 ClickHouse는 NULL을 지원하지 않으므로, JOIN 시 예상치 못한 결과가 나올 수 있어.
🔹 join_use_nulls = 1을 설정하면, NULL을 올바르게 처리함.


---

✅ 2️⃣ max_bytes_before_external_join 설정 (메모리 최적화)

ClickHouse는 기본적으로 JOIN 데이터를 메모리에 올려서 처리해.
데이터가 크면 메모리 부족 오류가 날 수 있으므로, JOIN을 디스크로 오프로드하는 설정이 필요함.

SET max_bytes_before_external_join = 5000000000;  -- 5GB까지 메모리 사용 후 디스크 오프로드
SET max_memory_usage = 10000000000;  -- 최대 10GB 메모리 사용 허용

🔹 대량 JOIN 시, 메모리를 초과하면 디스크를 사용하도록 설정
🔹 기본적으로 ClickHouse는 RAM에서 처리하려고 하므로, RAM이 부족하면 설정을 늘려야 함


---

🔹 3. JOIN 성능을 높이는 테이블 설계

ClickHouse에서는 테이블 유형을 올바르게 선택하는 것이 JOIN 성능을 높이는 핵심이야.
기본적으로 MergeTree 계열을 사용하지만, JOIN 최적화를 위해 다른 엔진을 사용할 수도 있음.

✅ 1️⃣ 작은 테이블은 Join 엔진 사용

ClickHouse에서 작은 테이블을 자주 JOIN한다면, Join 엔진을 사용하면 성능이 훨씬 좋아짐.


CREATE TABLE small_table
(
    id UInt64,
    name String
) ENGINE = Join(ANY, LEFT, id);

🔹 Join 엔진을 사용하면 메모리에 올려서 빠르게 조회 가능 🚀
🔹 일반적인 테이블보다 JOIN 속도가 훨씬 빠름


---

✅ 2️⃣ 큰 테이블은 Dictionary 엔진 사용 (고정 데이터)

만약 테이블 크기가 크고, 자주 변경되지 않는다면, Dictionary 엔진을 활용하면 JOIN 속도가 급격히 향상됨.


CREATE DICTIONARY my_dict
(
    id UInt64,
    name String
)
PRIMARY KEY id
SOURCE(CLICKHOUSE(HOST 'localhost' PORT 9000 USER 'default' PASSWORD '' DB 'default' TABLE 'large_table'))
LIFETIME(MIN 300 MAX 3600);

🔹 Dictionary 엔진을 사용하면 데이터를 캐싱하여 JOIN 속도를 높일 수 있음 🚀


---

✅ 3️⃣ 일반적인 큰 테이블은 MergeTree 사용

기본적으로 MergeTree 엔진을 사용해야 함.


CREATE TABLE large_table
(
    id UInt64,
    name String,
    event_time DateTime
) ENGINE = MergeTree()
PARTITION BY toYYYYMM(event_time)  -- 월별 파티션
ORDER BY (id, event_time);

🔹 ORDER BY 설정을 잘하면, JOIN 속도가 훨씬 빨라짐 🚀
🔹 PARTITION BY를 사용하면 필요한 데이터만 스캔할 수 있음.


---

🔹 4. JOIN 성능을 높이는 SQL 최적화 방법

JOIN 쿼리를 실행할 때, 성능을 높이는 몇 가지 핵심 방법이 있어!

✅ 1️⃣ ANY INNER JOIN을 사용하여 불필요한 데이터 JOIN 방지

SELECT a.id, a.name, b.category
FROM large_table AS a
ANY INNER JOIN small_table AS b
ON a.id = b.id;

🔹 ANY INNER JOIN을 사용하면 첫 번째 일치 항목만 가져오기 때문에 속도가 빠름
🔹 ALL INNER JOIN보다 성능이 좋음


---

✅ 2️⃣ PREWHERE로 먼저 필터링 (불필요한 데이터 스캔 방지)

SELECT a.id, a.name, b.category
FROM large_table AS a
ANY INNER JOIN small_table AS b
ON a.id = b.id
PREWHERE a.event_time >= now() - INTERVAL 30 DAY;

🔹 PREWHERE를 사용하면 먼저 필터링을 수행하여 성능을 최적화할 수 있음 🚀


---

✅ 3️⃣ LIMIT을 활용하여 부분 데이터만 처리

SELECT a.id, a.name, b.category
FROM large_table AS a
ANY INNER JOIN small_table AS b
ON a.id = b.id
ORDER BY a.event_time DESC
LIMIT 10000;

🔹 전체 데이터 JOIN을 수행하면 속도가 느려지므로, LIMIT을 활용하여 최적화 가능 🚀


---

🔹 5. JOIN 최적화를 위한 ClickHouse 설정

대용량 JOIN을 처리할 때, 추가적인 시스템 설정도 중요해.

SET max_memory_usage = 10000000000;  -- 10GB 메모리 사용 가능
SET max_bytes_before_external_join = 5000000000;  -- 5GB 초과 시 디스크 사용
SET join_algorithm = 'hash';  -- 해시 JOIN 사용 (기본값)
SET max_joined_block_size_rows = 1000000;  -- 한 번에 처리할 행 개수 제한
SET distributed_product_mode = 'local';  -- 분산 테이블에서 JOIN 최적화

🔹 메모리 한도를 늘리고, 디스크 오프로드 설정을 조정하면 안정적인 JOIN 가능
🔹 join_algorithm = 'hash'를 사용하면 빠른 해시 JOIN 수행


---

🔹 6. 최적화 요약
최적화 방법	설명	예제
ANY INNER JOIN 사용	첫 번째 일치 항목만 가져와서 성능 향상	ANY INNER JOIN
PREWHERE 사용	먼저 필터링을 수행하여 불필요한 스캔 방지	PREWHERE event_time >= now() - INTERVAL 30 DAY
LIMIT 사용	불필요한 데이터 조회 방지	LIMIT 10000
Join 엔진 사용	작은 테이블을 메모리에 캐싱하여 JOIN 속도 향상	ENGINE = Join(ANY, LEFT, id)
Dictionary 엔진 사용	변경이 적은 데이터는 Dictionary 엔진 활용	CREATE DICTIONARY
메모리 설정 최적화	JOIN 처리 시 메모리 한도를 늘려 성능 향상	SET max_memory_usage = 10GB;


---

이제 ClickHouse에서 대용량 데이터를 JOIN하면서도 빠르게 조회할 수 있어! 🚀
더 궁금한 점 있으면 질문해 줘! 😊

