ClickHouse에서 복잡한 쿼리(여러 테이블 LEFT JOIN 후 ORDER BY 수행)의 속도를 최적화하는 방법을 정리해볼게.


---

1. JOIN 최적화

ClickHouse의 JOIN은 MergeTree 기반이므로, 잘못 사용하면 성능이 크게 저하될 수 있어. 다음 방법들을 고려하면 성능을 향상시킬 수 있어.

✅ Distributed Join 대신 JOIN 방식 변경

기본적으로 ClickHouse는 Distributed 테이블을 사용할 경우 JOIN을 실행 노드에서 처리하는데, 이는 성능 저하를 유발할 수 있어.

SET join_algorithm = 'partial_merge' | 'parallel_hash' | 'grace_hash' 등으로 적절한 알고리즘을 선택해 최적화할 수 있어.


✅ JOIN 유형 변경

LEFT JOIN을 사용할 때, 필요 없는 열까지 모두 가져오면 성능이 저하됨.

ANY LEFT JOIN 또는 ASOF JOIN을 사용하면 성능이 더 좋아질 수 있어.


SELECT *
FROM main_table
ANY LEFT JOIN sub_table ON main_table.id = sub_table.id

ANY LEFT JOIN은 sub_table에서 첫 번째 일치하는 행만 가져오므로 메모리 사용량이 줄어듦.


✅ JOIN을 사전 집계된 데이터로 변경

만약 서브 테이블이 큰 경우, 미리 Materialized View 또는 AggregatingMergeTree를 사용해 집계한 후 JOIN하는 것도 방법.


CREATE MATERIALIZED VIEW mv_sub_table 
ENGINE = AggregatingMergeTree() 
ORDER BY id 
AS SELECT id, count(*) AS count FROM sub_table GROUP BY id;


---

2. ORDER BY 최적화

ClickHouse의 정렬은 CPU와 메모리를 많이 소모할 수 있어. 다음을 고려하면 속도를 개선할 수 있어.

✅ ORDER BY 대상 컬럼을 Primary Key와 동일하게 설정

ORDER BY를 사용할 때, 테이블의 정렬 방식과 일치하면 쿼리 속도가 향상됨.

예를 들어, 테이블이 다음과 같이 정의되어 있다면:


CREATE TABLE main_table 
(
    id UInt64, 
    created_at DateTime
) ENGINE = MergeTree()
ORDER BY (created_at, id);

쿼리를 실행할 때도 ORDER BY created_at, id로 정렬하면 추가적인 정렬 비용이 적어짐.


✅ ORDER BY LIMIT 최적화

정렬 후 일부 데이터만 필요한 경우, LIMIT을 적극적으로 활용하면 성능을 개선할 수 있어.


SELECT * 
FROM main_table 
ORDER BY created_at DESC 
LIMIT 1000;

필요 없는 모든 데이터를 정렬하는 것이 아니라 LIMIT을 사용하면 정렬 성능이 개선됨.


✅ Parallel Sorting 활성화

SET max_threads = 16; (CPU 코어 수에 맞춰 조절)

SET max_block_size = 8192; (디폴트보다 크게 설정 가능)



---

3. 데이터 스토리지 최적화

✅ Column Compression 활용

ClickHouse는 기본적으로 LZ4 압축을 사용하지만, ZSTD를 사용하면 더 높은 압축률을 제공.

ALTER TABLE main_table MODIFY COLUMN column_name CODEC(ZSTD(5));


✅ 분할(Partitioning) 전략 변경

데이터가 매우 크다면 적절한 PARTITION 전략을 세우는 것이 중요.

예를 들어, created_at 기준으로 PARTITION BY toYYYYMM(created_at)을 사용하면 특정 기간 데이터를 빠르게 조회할 수 있음.


CREATE TABLE main_table 
(
    id UInt64, 
    created_at DateTime
) ENGINE = MergeTree()
PARTITION BY toYYYYMM(created_at)
ORDER BY (created_at, id);


---

4. 쿼리 실행 최적화

✅ 쿼리 프로파일링

성능을 최적화하려면 실행 계획을 확인하는 것이 중요함.


EXPLAIN PIPELINE SELECT * FROM main_table LEFT JOIN sub_table ON main_table.id = sub_table.id ORDER BY created_at;

EXPLAIN PIPELINE을 사용하면 병렬 처리, 정렬, JOIN 방식 등을 확인할 수 있어.


✅ JOIN 결과를 ARRAY JOIN으로 변경

작은 테이블과 JOIN할 경우, ARRAY JOIN을 사용하면 성능이 향상될 수도 있음.


SELECT id, value FROM main_table ARRAY JOIN sub_table_array;


---

5. 쿼리 실행 전 설정값 변경

ClickHouse에서 쿼리를 실행하기 전에 설정을 변경하면 성능이 더 좋아질 수도 있어.

SET join_algorithm = 'partial_merge';  -- JOIN 최적화
SET max_threads = 16;  -- 멀티스레드 최적화
SET max_block_size = 8192;  -- 블록 크기 조절
SET max_memory_usage = 10G;  -- 메모리 사용량 제한
SET allow_experimental_analyzer = 1;  -- 실험적 최적화 기능 활성화


---

✅ 결론

1. JOIN 최적화 → ANY JOIN, Materialized View, AggregatingMergeTree


2. ORDER BY 최적화 → Primary Key와 맞추기, LIMIT 활용


3. 데이터 스토리지 최적화 → PARTITION BY, ZSTD 압축


4. 쿼리 실행 최적화 → EXPLAIN PIPELINE, ARRAY JOIN 활용


5. 쿼리 설정 최적화 → join_algorithm, max_threads 조절



이 방법들을 적용하면 복잡한 LEFT JOIN 후 ORDER BY 성능이 훨씬 개선될 거야! 🚀

